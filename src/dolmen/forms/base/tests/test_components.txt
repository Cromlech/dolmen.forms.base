Errors collections
~~~~~~~~~~~~~~~~~~

Errors collections are special collections that can, in some cases,
act as a Component. They are meant to be stackable, to provide a clean
and easy way to group errors logically.

  >>> from dolmen.collection import interfaces
  >>> from dolmen.forms.base.errors import Errors, Error
  >>> from zope.interface.verify import verifyObject

  >>> errors = Errors()
  >>> interfaces.ICollection.providedBy(errors)
  True
  >>> verifyObject(interfaces.ICollection, errors)
  True

When created without the "identifier" keyword, the Errors instance is
not considered as a Component and will only accept Error subclasses,
denying stacking Errors::

  >>> interfaces.IComponent.providedBy(errors)
  False

  >>> errors.append(Errors())
  Traceback (most recent call last):
  ...
  TypeError: ('Invalid type', <Errors>)

If we give the "identifier" keyword to the Errors constructor, the
resulting instance is considered a valid Component object::

  >>> errors_group = Errors(identifier='form.somefield')
  >>> interfaces.IComponent.providedBy(errors_group)
  True

Therefore, they will be allowed as a valid Errors item::

  >>> errors.append(errors_group)
  >>> errors.get('form.somefield')
  <Errors for 'form.somefield'>
  >>> errors.get('form.somefield') is errors_group
  True

  >>> verifyObject(interfaces.ICollection, errors_group)
  True
  >>> verifyObject(interfaces.IComponent, errors_group)
  True

We now can stack errors in logical groups::

  >>> errors_group.append(Error('Some title', identifier='form.field'))
  >>> errors_group.get('form.field')
  <Error Some title>
